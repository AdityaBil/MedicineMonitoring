import time
import random
import sqlite3
import numpy as np

from datetime import date


class Medicine:
    def __init__(self, name, batch_no, mfg_date, exp_date, chemical_composition, temperature, humidity):
        self.name = name
        self.batch_no = batch_no
        self.mfg_date = mfg_date
        self.exp_date = exp_date
        self.chemical_composition = chemical_composition
        self.temperature = temperature
        self.humidity = humidity
        self.quality_status = "Unknown" 

    def info(self):
        print(f"Name: {self.name}, Batch: {self.batch_no}, MFG: {self.mfg_date}, Composition: {self.chemical_composition}")      

    def check_quality(self):
        if self.temperature > 30 or self.humidity > 70:
            self.quality_status = "Poor"
        elif self.temperature < 15 or self.humidity < 20:
            self.quality_status = "Critical"
        else:
            self.quality_status = "Good"
        return self.quality_status

def monitor_quality(products):
    for product in products:
        status = product.check_quality()
        print(f"Product: {product.name}, Batch: {product.batch_no}, Status: {status}")

def alert_system(product):
    if product.quality_status != "Good":
        print(f"ALERT: {product.name} (Batch {product.batch_no}) is in {product.quality_status} condition!")

def run_monitoring_cycle(products, cycles=3):
    for i in range(cycles):
        print(f"\n--- Monitoring Cycle {i+1} ---")
        for product in products:
            product.temperature = random.uniform(10, 40)  # Randomize temperature
            product.humidity = random.uniform(10, 80)  # Randomize humidity
            product.check_quality()
            alert_system(product)
        time.sleep(2) 

med1 = Medicine("Paracetamol", "B123", "01/01/2024", "01/01/2026", "C8H9NO2", 25, 50)
med2 = Medicine("Ibuprofen", "B456", "15/03/2024", "15/03/2026", "C13H18O2", 28, 55)

products = [med1, med2]
run_monitoring_cycle(products, cycles=3)
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

X_train = np.array([[25, 40], [32, 75], [20, 50], [35, 80], [15, 30]]) 
y_train = np.array([1, 0, 1, 0, 1])  #(1: Good, 0: Bad)

model = LinearRegression()
model.fit(X_train, y_train)

def predict_quality(temperature, humidity):
    prediction = model.predict([[temperature, humidity]])[0]
    return "Good" if prediction > 0.5 else "Bad"

predicted_status = predict_quality(28, 65)
print("Predicted Quality Status:", predicted_status)

# SQL 
def get_drug_quantities():
    conn = sqlite3.connect('drug_inventory.db')
    cursor = conn.cursor()
    cursor.execute('SELECT name, quantity FROM drugs')
    rows = cursor.fetchall()
    conn.close()
    return rows

def get_supply_chain_data():
    conn = sqlite3.connect('drug_inventory.db')
    cursor = conn.cursor()
    cursor.execute('SELECT drug_name, date, quantity_moved FROM supply_chain')
    rows = cursor.fetchall()
    conn.close()
    return rows

def plot_supply_chain_movements():
    data = get_supply_chain_data()
    if not data:
        print("No data available for plotting.")
        return
    
    drug_names = [row[0] for row in data]
    dates = [row[1] for row in data]
    quantities_moved = [row[2] for row in data]
    import matplotlib.pyplot as plt
    plt.figure(figsize=(10, 6))
    plt.plot(dates, quantities_moved, marker='o', linestyle='-', color='orange')
    plt.title('Supply Chain Movement Over Time')
    plt.xlabel('Date')
    plt.ylabel('Quantity Moved')
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

